<?php
/**
 * Define Module Constants
 */
define("MENU_IMAGES_MODULE_PATH", drupal_get_path( 'module', 'menu_images' ));
define("MENU_IMAGES_DIRECTORY", file_create_path() .'/menu-images');

//Include necessary Class(es) here - it's best to not have this in the init hook, because Drupal loads modules in different orders than we expect sometimes
include_once( MENU_IMAGES_MODULE_PATH. '/inc/class.module.inc' );
include_once( MENU_IMAGES_MODULE_PATH. '/inc/admin.module.inc' );

/**
 * Hook menu
 */
function menu_images_menu() {
  $items = array();
  $items['admin/settings/menu-images'] = array(
    'title'             => t('Menu Images'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('_menu_images_main_settings'),
    'type'              => MENU_NORMAL_ITEM,
    'access arguments'  => array('administer site configuration'),
  );
  return $items;
}

/**
 * Hook Init
 */
function menu_images_init() {
  $menuImages = new menuImages();
  $menuImages->_loadJS();
}

/**
 * Hook Form Alter
 */
function menu_images_form_alter( &$form, &$form_state, $form_id ) {
  //We are going to intercept the node form here via a switch, so if we need to add to anything here, then we can
  switch ($form['#id']) {
    case 'node-form':
      //Add in our menu-images-form.css file
      drupal_add_css(MENU_IMAGES_MODULE_PATH .'/css/menu-images-form.css');
      //Modify our form wieghts, so it makes sense the order that you use things.
      $form['menu']['parent']['#weight'] = 99;
      $form['menu']['weight']['#weight'] = 100;
      //Query the DB for our additions
      $data = db_fetch_array(db_query("SELECT fid, link_description FROM {menu_links} WHERE mlid = %d", $form['menu']['mlid']['#value']));
      //Add in our image field here
      $form['menu']['menu_image']['link_description'] = array(
        '#type'        => 'textfield',
        '#description' => t('Add a description for this menu item'),
        '#title'       => t('Menu item description.'),
        '#size'        => 60,
        '#default_value' => t($data['link_description']),
      );
      //Get our default file information.
      $file  = field_file_load($data['fid']);
      $image = (!empty($data['fid'])) ? theme('image', $file['filepath']) : t('No Image Selected');
      $form['menu']['menu_image']['file'] = array(
        '#type'          => 'file',
        '#description'   => t('Add an image for this menu item. When you press save, the image will upload itself. To replace this image, browse for a new file. To delete this image, click on "delete this image".'),
        '#title'         => t('Attach an image to this menu item no larger than !dimensions', array('!dimensions' => variable_get('menu_image_picture_dimensions', NULL))),
        '#size'          => 40,
        '#default_value' => $file['filepath'],
        '#prefix'        => '<div class="current-menu-image"><h5>Current Image</h5>' .$image .'</div>',
      );
      //If we have an image, then show the delete checkbox
      if (!is_null($data['fid'])) {
        $form['menu']['menu_image']['delete_image'] = array(
          '#type'          => 'checkbox',
          '#description'   => t('Delete this image'),
          '#title'         => t('Check this box to delete this image.'),
          '#size'          => 60,
          '#default_value' => 0,
        );
        $form['menu']['menu_image']['delete_image_filepath'] = array(
          '#type'          => 'hidden',
          '#default_value' => $file['filepath'],
        );
      }
      //Add in our own submit handler, so we can just use our own submit function
      $form['#submit'][]              = '_menu_images_form_submit';
      $form['#attributes']['enctype'] = 'multipart/form-data';
    break;
  }
}

/**
 * Hook submit
 */
function _menu_images_form_submit( &$form, &$form_state ) {
  //Save the file to our files directory if it does not exist.
  //Validate the uploaded picture.
  $validators = array(
    'file_validate_is_image'         => array(),
    'file_validate_image_resolution' => array(variable_get('menu_image_picture_dimensions', NULL)),
    'file_validate_size'             => array(variable_get('menu_image_picture_file_size', '30') * 1024),
  );
  //Set error is file was not uploaded - the $_FILES array uses the top most name, so this is $_FILES['name']['menu'] - weird huh?
  if ( $file = file_save_upload( 'menu', $validators, MENU_IMAGES_DIRECTORY, FALSE ) ) {
    $form_state['values']['menu_image']['file'] = $file;
  }
  //Save our description, so it's easier to find in the node
  $form_state['values']['menu_image']['link_description'] = $form_state['values']['menu']['menu_image']['link_description'];
  //If we are deleting the node, then set the image delete flag
  $form_state['values']['menu_image']['delete_image'] = $form_state['values']['menu']['menu_image']['delete_image'];
}

/**
 * Implementation of hook_nodeapi().
 */
function menu_images_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      //Update our SQL if we have a menu item.
      if (isset($node->menu)) {
        //Change the menu description
        db_query("UPDATE {menu_links} SET link_description = '%s' WHERE mlid = %d", $node->menu_image['link_description'], $node->menu['mlid']);
        //Set our newCache variable for the description.
        $newCache[$node->menu['mlid']]['description'] = $node->menu_image['link_description'];
        //If we have new $file object, then update the fid.
        if (is_object($node->menu_image['file']) && $node->menu_image['file']->fid > 0) {
          db_query("UPDATE {menu_links} SET fid = %d WHERE mlid = %d", $node->menu_image['file']->fid, $node->menu['mlid']);
          //Set newCache to allow for the new file.
          $newCache[$node->menu['mlid']]['file'] = $node->menu_image['file'];
          //Set a success message.
          drupal_set_message(t('Success! Your menu image has been uploaded.'));
        } else if ($node->menu_image['delete_image'] == 1) {
          //Else we are deleting an image from our database
          file_delete( $node->menu_image['delete_image_filepath'] );
          db_query( "DELETE FROM {files} WHERE filepath LIKE '%s'", $node->menu_image['delete_image_filepath']);
          //Udate the record to have no data
          db_query("UPDATE {menu_links} SET fid = NULL WHERE mlid = %d", $node->menu['mlid']);
          //Set the newCache file to NULL.
          $newCache[$node->menu['mlid']]['file'] = 'DELETE';
          drupal_set_message(t('Your menu image has been deleted.'), 'warning');
        }
        //Update the cache_menu_images table with our new menu_images data
        menuImages::_setMenuImageCache($newCache);
      }
      break;
  }
}

/**
 * Return a themed set of links.
 *
 * @param $links
 *   A keyed array of links to be themed.
 * @param $attributes
 *   A keyed array of attributes
 * @return
 *   A string containing an unordered list of links.
 */
function phptemplate_links($links, $attributes = array('class' => 'links')) {
  global $language;
  $output = '';

  if (count($links) > 0) {
    $output = '<ul'. drupal_attributes($attributes) .'>';

    $num_links = count($links);
    $i = 1;

    foreach ($links as $key => $link) {
      $class = $key;

      // Add first, last and active classes to the list of links to help out themers.
      if ($i == 1) {
        $class .= ' first';
      }
      if ($i == $num_links) {
        $class .= ' last';
      }
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))
          && (empty($link['language']) || $link['language']->language == $language->language)) {
        $class .= ' active';
      }
      $output .= '<li'. drupal_attributes(array('class' => $class)) .'>';

      if (isset($link['href'])) {
        $checkKey = explode('-',$key);
        $menuImages = menuImages::_getCache('all_menu_images');
        if (!empty($menuImages[$checkKey[1]])) {
          //Set HTML to TRUE if we have an image we need to put in.
          $link['html'] = TRUE;
          //Set the image to have the proper alt text for SEO purposes.
          $attributes = array(
            'class' => 'menu-image',
          );
          $link['title'] = theme('image', $menuImages[$checkKey[1]]['file']->filepath, t($link['title']), t($link['title']), $attributes, FALSE);
        }
        // Pass in $link as $options, they share the same keys.
        $output .= l($link['title'], $link['href'], $link);
      }
      else if (!empty($link['title'])) {
        // Some links are actually not links, but we wrap these in <span> for adding title and class attributes
        if (empty($link['html'])) {
          $link['title'] = check_plain($link['title']);
        }
        $span_attributes = '';
        if (isset($link['attributes'])) {
          $span_attributes = drupal_attributes($link['attributes']);
        }
        $output .= '<span'. $span_attributes .'>'. $link['title'] .'</span>';
      }

      $i++;
      $output .= "</li>\n";
    }

    $output .= '</ul>';
  }

  return $output;
}

/**
 * Allow Menu Items to have their own inidivudal class
 */
function phptemplate_menu_item($link, $has_children, $menu = '', $in_active_trail = FALSE, $extra_class = NULL) {
  //Make a new DOM pbject we can play with to get our classes. This is a problem with Drupal's menu rendering.
  $dom = new DOMDocument;
  @$dom->loadHTML($link);
  $dom->preserveWhiteSpace = false;
  $links = $dom->getElementsByTagName('a');
  //Loop through links to get id's
  foreach ($links as $tag) { $id = $tag->getAttribute('id'); }
  //Normal Drupal opertations come afterwards.
  $class = ($menu ? 'expanded' : ($has_children ? 'collapsed' : 'leaf'));
  if (!empty($extra_class)) {
    $class .= ' '. $extra_class;
  }
  if ($in_active_trail) {
    $class .= ' active-trail';
  }
  return '<li id="' .$id .'" class="'. $class .'">' .$link . $menu ."</li>\n";
}

/**
 * Change links to have a menu id, so we can target those items individually
 */
function phptemplate_menu_item_link($link) {
  //Add an ID to the link, so we can translates it into a, li id - since menu_tree is not interceptable
  if (empty($link['localized_options'])) {
    $link['localized_options'] = array();
  }
  //Id = the mlid and module name
  $id = array($link['module'], $link['mlid']);
  if (empty($link['module']) && empty($link['mlid'])) { 
    //If this array is still empty, then use the title of the link
    $id = split(" ", strtolower($link['title']));
  }
  //Output to localized options.
  $link['localized_options']['attributes']['id'] = implode('-', $id);
  //See if we need to output our link as an image through the regular menu system
  $menuImages = menuImages::_getCache('all_menu_images');
  if (!empty($menuImages[$link['mlid']])) {
    //Set HTML to TRUE if we have an image we need to put in.
    $link['localized_options']['html'] = TRUE;
    //Set the image to have the proper alt text for SEO purposes.
    $attributes = array(
      'class' => 'menu-image',
    );
    $link['title'] = theme('image', $menuImages[$link['mlid']]['file']->filepath, t($link['title']), t($link['title']), $attributes, FALSE);
  }
  //Return the link.
  return l($link['title'], $link['href'], $link['localized_options']);
}