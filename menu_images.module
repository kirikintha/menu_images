<?php
/**
 * @name Menu Images
 * Allows end users to add images to their menues via the node form and admin UI.
 * NOTE: Currently this only uses the Secondary Links navigation.
 * @author Paul T. Huntsberger courtesy of our friends at Blue Tent Marketing
 * @version 1.0-dev
 */

/**
 * Define Module Constants
 */
define("MENU_IMAGES_MODULE_PATH", drupal_get_path( 'module', 'menu_images' ));
define("MENU_IMAGES_DIRECTORY", file_create_path() .'/menu-images');

//Include necessary Class(es) here - it's best to not have this in the init hook, because Drupal loads modules in different orders than we expect sometimes
include_once( MENU_IMAGES_MODULE_PATH. '/inc/class.module.inc' );
include_once( MENU_IMAGES_MODULE_PATH. '/inc/admin.module.inc' );

/**
 * Hook menu
 */
function menu_images_menu() {
  $items = array();
  $items['admin/settings/menu-images'] = array(
    'title'            => t('Menu Images'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_menu_images_main_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Hook Init
 */
function menu_images_init() {
  $menuImages = new menuImages();
  $menuImages->_loadJS();
}

/**
 * Hook Form Alter
 */
function menu_images_form_alter(&$form, &$form_state, $form_id) {
  //We are going to intercept the node form here via a switch, so if we need to add to anything here, then we can
  switch ($form['#id']) {
    case 'menu-edit-item':
    case 'node-form':
      //Add in our menu-images-form.css file
      drupal_add_css(MENU_IMAGES_MODULE_PATH .'/css/menu-images-form.css');
      //Modify our form wieghts, so it makes sense the order that you use things.
      $form['menu']['parent']['#weight'] = 99;
      $form['menu']['weight']['#weight'] = 100;
      //Query the cache for our additions
      $cached_images = menuImages::_getCache('all_menu_images');
      //Get the menu ID.
      $mlid = $form['menu']['mlid']['#value'];
      //krumo($form['menu']['mlid']['#value']);
      //krumo($cached_images[$mlid]['description']);
      //krumo($cached_images[$mlid]['file']);
      //Add in our image field here
      $form['menu']['menu_image']['link_description'] = array(
        '#type'          => 'textfield',
        '#description'   => t('Add a description for this menu item.'),
        '#title'         => t('Menu item description'),
        '#size'          => 60,
        '#default_value' => t($cached_images[$mlid]['description']),
      );
      //Get our default file information.
      //krumo($cached_images[$form['menu']['mlid']['#value']]['file']->filepath);
      $image = (!empty($cached_images[$mlid]['file']->filepath)) ? theme('imagecache', 'menu_image_thumb', $cached_images[$mlid]['file']->filepath, t($cached_images[$mlid]['description']), t($vars[$key][$item]['title']),  $attributes) : t('No Image Selected');
      //krumo($image);
      $form['menu']['menu_image']['file'] = array(
        '#type'          => 'file',
        '#description'   => t('Add an image for this menu item. When you press save, the image will upload itself. To replace this image, browse for a new file. To delete this image, click on "delete this image".'),
        '#title'         => t('Attach an image to this menu item no larger than !dimensions', array('!dimensions' => variable_get('menu_image_picture_dimensions', NULL))),
        '#size'          => 40,
        '#default_value' => $cached_images[$mlid]['file']->filepath,
        '#prefix'        => '<div class="current-menu-image"><h5>Current Image</h5>' .$image .'</div>',
      );
      $form['menu']['menu_image']['file_title'] = array(
        '#type'          => 'textfield',
        '#description'   => t('Add a title to this menu image.'),
        '#title'         => t('Image title'),
        '#size'          => 40,
        '#default_value' => t($cached_images[$mlid]['file_title']),
      );
      $form['menu']['menu_image']['file_alt'] = array(
        '#type'          => 'textfield',
        '#description'   => t('Add a description for this menu image.'),
        '#title'         => t('Image description'),
        '#size'          => 40,
        '#default_value' => t($cached_images[$mlid]['file_alt']),
      );
      //If we have an image, then show the delete checkbox
      if (!empty($cached_images[$mlid]['file']->filepath)) {
        $form['menu']['menu_image']['delete_image'] = array(
          '#type'          => 'checkbox',
          '#description'   => t('Delete this image'),
          '#title'         => t('Check this box to delete this image.'),
          '#size'          => 60,
          '#default_value' => 0,
        );
        $form['menu']['menu_image']['delete_image_filepath'] = array(
          '#type'          => 'hidden',
          '#default_value' => $cached_images[$mlid]['file']->filepath,
        );
      }
      //Add in our own submit handler, so we can just use our own submit function
      $form['#submit'][]              = '_menu_images_form_submit';
      $form['#attributes']['enctype'] = 'multipart/form-data';
      break;
  }
}

/**
 * Hook submit
 */
function _menu_images_form_submit(&$form, &$form_state) {
  //Save the file to our files directory if it does not exist.
  //Validate the uploaded picture.
  $validators = array(
    'file_validate_is_image'         => array(),
    'file_validate_image_resolution' => array(variable_get('menu_image_picture_dimensions', NULL)),
    'file_validate_size'             => array(variable_get('menu_image_picture_file_size', '30') * 1024),
  );
  //Set error is file was not uploaded - the $_FILES array uses the top most name, so this is $_FILES['name']['menu'] - weird huh?
  if ($file = file_save_upload('menu', $validators, MENU_IMAGES_DIRECTORY, FALSE)) {
    //Set the status of the file to permanent.
    file_set_status($file,FILE_STATUS_PERMANENT);
    //Assign the file to a more reasonable value that we don't have to dig for in the array.
    $form_state['values']['menu_image']['file'] = $file;
    //Flush the image cache preset for this image.
    if (module_exists('imagecache')) {
      imagecache_image_flush($file->filepath);
    }
  }
  //Save our description, image title and image alt (description) so it's easier to find in the node.
  $form_state['values']['menu_image']['link_description'] = $form_state['values']['menu']['menu_image']['link_description'];
  $form_state['values']['menu_image']['file_title']       = $form_state['values']['menu']['menu_image']['file_title'];
  $form_state['values']['menu_image']['file_alt']         = $form_state['values']['menu']['menu_image']['file_alt'];
  
  //If we are deleting the node, then set the image delete flag.
  $form_state['values']['menu_image']['delete_image'] = $form_state['values']['menu']['menu_image']['delete_image'];
  
  //If we are saving an admin menu, we do not use nodeapi, so we update here - don't like repeating code here
  //@internal - When saving new nodes, we have to use nodeapi, because we have to get the mlid, when we are in admin we never get to node api sometimes, so we'll set it here.
  //@internal - I know there is a better way to extrapolate this, this needs a little work here.
  if ($form_state['values']['form_id'] == 'menu_edit_item') {
    $mlid = $form_state['values']['menu']['mlid'];
    //Set our newCache variable for the description, file_title and file_alt.
    $newCache[$mlid]['description'] = $form_state['values']['menu_image']['link_description'];
    $newCache[$mlid]['file_title']  = $form_state['values']['menu_image']['file_title'];
    $newCache[$mlid]['file_alt']    = $form_state['values']['menu_image']['file_alt'];
    //If we have new $file object, then update the fid.
    if (is_object($form_state['values']['menu_image']['file']) && $form_state['values']['menu_image']['file']->fid > 0) {
      //Set newCache to allow for the new file.
      $newCache[$mlid]['file'] = $form_state['values']['menu_image']['file'];
      //Set a success message.
      drupal_set_message(t('Success! Your menu image has been uploaded.'));
    } else if ($form_state['values']['menu_image']['delete_image'] === 1) {
      //Else we are deleting an image from our database
      //Set the newCache file to NULL.
      $newCache[$mlid]['file'] = 'DELETE';
      drupal_set_message(t('Your menu image has been deleted.'), 'warning');
    }
    //Update the cache_menu_images table with our new menu_images data
    menuImages::_setMenuImageCache($newCache);
  }
}

/**
 * Implementation of hook_nodeapi().
 * @todo - Remove db_query for menu_links table and keep this soley in our custom cache table
 */
function menu_images_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      //Update our SQL if we have a menu item.
      if (isset($node->menu)) {
        //Change the menu description
        //@todo marked for deletion.
        db_query("UPDATE {menu_links} SET link_description = '%s' WHERE mlid = %d", $node->menu_image['link_description'], $node->menu['mlid']);
        //Set our newCache variable for the description, file_title and file_alt.
        $newCache[$node->menu['mlid']]['description'] = $node->menu_image['link_description'];
        $newCache[$node->menu['mlid']]['file_title']  = $node->menu_image['file_title'];
        $newCache[$node->menu['mlid']]['file_alt']    = $node->menu_image['file_alt'];
        //If we have new $file object, then update the fid.
        if (is_object($node->menu_image['file']) && $node->menu_image['file']->fid > 0) {
          //@todo marked for deletion.
          db_query("UPDATE {menu_links} SET fid = %d WHERE mlid = %d", $node->menu_image['file']->fid, $node->menu['mlid']);
          //Set newCache to allow for the new file.
          $newCache[$node->menu['mlid']]['file'] = $node->menu_image['file'];
          //Set a success message.
          drupal_set_message(t('Success! Your menu image has been uploaded.'));
        } else if ($node->menu_image['delete_image'] === 1) {
          //Else we are deleting an image from our database
          //@todo marked for deletion.
          file_delete( $node->menu_image['delete_image_filepath'] );
          //@todo marked for deletion.
          db_query( "DELETE FROM {files} WHERE filepath LIKE '%s'", $node->menu_image['delete_image_filepath']);
          //Update the record to have no data
          //@todo marked for deletion.
          db_query("UPDATE {menu_links} SET fid = NULL WHERE mlid = %d", $node->menu['mlid']);
          //Set the newCache file to NULL.
          $newCache[$node->menu['mlid']]['file'] = 'DELETE';
          drupal_set_message(t('Your menu image has been deleted.'), 'warning');
        }
        //Update the cache_menu_images table with our new menu_images data
        menuImages::_setMenuImageCache($newCache);
      }
      break;
  }
}

/**
* Implementation of hook_imagecache_default_presets().
* @todo - make these interoperable in the UI with other imagecache presets, so you can choose.
*/
function menu_images_imagecache_default_presets() {
  $presets = array();
  //Image Thumb.
  $presets['menu_image_thumb'] = array (
    'presetname' => 'menu_image_thumb',
    'actions'    => array (
      0 => array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array (
          'width'  => '197',
          'height' => '135',
        ),
      ),
    ),
  );
  //Full Image.
  $presets['menu_image_full'] = array (
    'presetname' => 'menu_image_full',
    'actions'    => array (
      0 => array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array (
          'width'  => '1010',
          'height' => '614',
        ),
      ),
    ),
  );
  return $presets;
}

/**
 * Implementation of hook_preprocess_page().
 */
function menu_images_preprocess_page(&$vars) {
  //Get all images in our cache table.
  $cached_images = menuImages::_getCache('all_menu_images');
  //Switch between arguments, and apply to the selected menu items.
  $menues = variable_get('menu_images_menues_to_process',array('secondary_links'));
  //If we are in Primary Links or Secondary Links, we use theme('links') in the end, so we should only have to override the link in question. 
  foreach ($vars as $key => $value) {
    if (in_array($key, $menues)) {
      //If we are in the array, loop through and see if we have an item that has a corresponding image and let that run through
      foreach ($vars[$key] as $item => $link) {
        //krumo($link);
        //Get only the numeric contents of this menu item, which is the mlid we need
        $mlid = ereg_replace('[^0-9]+', '', $item);
        if (!empty($cached_images[$mlid])) {
          //If we have a cached image for this menu item or a description, then modify the link.
          if (isset($cached_images[$mlid]['description'])) {
            //We don't want to overide the title, so we are adding this as alt text.
            $vars[$key][$item]['attributes']['alt'] = t($cached_images[$mlid]['description']);
          }
          //If we have a filepath, use that as our imagecached image.
          if (is_object($cached_images[$mlid]['file'])) {
            $vars[$key][$item]['html']  = TRUE;
            //Set the attributes for our image, so the are SEO friendly.
            $attributes = array(
              'class' => 'menu-images-image',
            );
            //Turn the title into the image.
            $vars[$key][$item]['title'] = theme('imagecache', 'menu_image_thumb', $cached_images[$mlid]['file']->filepath, t($cached_images[$mlid]['file_alt']), t($cached_images[$mlid]['file_title']), $attributes); 
            //-> debug $vars[$key][$item]['title'] = theme('image', $cached_images[$mlid]['file']->filepath, t($cached_images[$mlid]['description']), t($vars[$key][$item]['title']), $attributes);
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_preprocess_block().
 */
function menu_images_preprocess_block(&$vars) {
  //Get all images in our cache table.
  $cached_images = menuImages::_getCache('all_menu_images');
  //Get the availables blocks we can modify, and apply to the selected menu items.
  $blocks = variable_get('menu_images_block_to_process',array('menu_block'));
  //If we have one of our block deltas in the array, modify that information
  //@todo turn this into a way to get the module and delta in the same admin UI.
  if (in_array($vars['block']->module, $blocks)) {
    //Load our menu content as a DOM document, so we can manipulate the li -> a value
    //krumo($vars['block']->content);
    $dom = new DOMDocument();
    $dom->loadHTML($vars['block']->content);
    $dom->preserveWhiteSpace = false;
    $parent = $dom->getElementsByTagName('div');
    $menu   = $dom->getElementsByTagName('ul');
    $lists  = $dom->getElementsByTagName('li');
    $links  = array();
    foreach ($lists as $list) {
      $mlid = ereg_replace('[^0-9]+', '', $list->getAttribute('id'));
      if (!empty($cached_images[$mlid]) && is_object($cached_images[$mlid]['file'])) {
        //Get the class
        $links[$list->getAttribute('id')]['attributes']['class'] = $list->getAttribute('class');
        //Get the a tag href
        $href = $list->getElementsByTagName('a');
        $links[$list->getAttribute('id')]['href'] = $href->item(0)->getAttribute('href');
        $links[$list->getAttribute('id')]['attributes']['title'] = t($href->item(0)->getAttribute('title'));
        //If we have a cached image for this menu item or a description, then modify the link.
        if (isset($cached_images[$mlid]['description'])) {
          //We don't want to overide the title, so we are adding this as alt text.
          $links[$list->getAttribute('id')]['attributes']['alt'] = t($cached_images[$mlid]['description']);
        } else {
          $links[$list->getAttribute('id')]['attributes']['alt'] = t($href->item(0)->nodeValue);
        }
        //Turn the link to an HTML link ad make an image cache image from it.
        $links[$list->getAttribute('id')]['html']  = TRUE;
        //Set the attributes for our image, so the are SEO friendly.
        $attributes = array(
          'class' => 'menu-images-image',
        );
        //Turn the title into the image.
        $links[$list->getAttribute('id')]['title'] = theme('imagecache', 'menu_image_thumb', $cached_images[$mlid]['file']->filepath, t($cached_images[$mlid]['file_alt']), t($cached_images[$mlid]['file_title']), $attributes);
      }
    }
    //Theme our links
    $output = '<div class="'.$parent->item(0)->getAttribute('class').'">'. theme('links', $links, array('class' => $menu->item(0)->getAttribute('class'))) .'</div>';
    $vars['block']->content = str_replace('href="//','href="/',$output);
  }
  unset($cached_images);
}